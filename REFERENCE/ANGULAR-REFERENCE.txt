
Angular 
---
  To create Angular Project -- you need Angular CLI  
  npm i @angular/cli -g 

  Angular 2   - 2016  - CLI Version 1.2.x 
  Angular 4   - 2017  - CLI Version 1.4.x 
  Angular 5   - 2017  - CLI Version 1.6.x 

  Angular 6   - 2018  - CLI Version 6.x  (ng cli followed semver)
  Angular 7   - 2018  - CLI Version 7.x 
  Angular 8   - 2019  - CLI Version 8.x 
  Angular 9   - 2020  - CLI Version 9.x 
  Angular 10  - 2020  - CLI Version 10.x  
  Angular 11  - 2020  - CLI Version 11.x 
  Angular 12  - 2021  - CLI Version 12.x 
  Angular 13  - 2021  - CLI Version 13.x 
  Angular 14  - 2022  - CLI Version 14.x 
  Angular 15  - 2022  - CLI Version 15.x (due by nov/dec 2022)


Building Blocks 
--
  Components
    HTML 
    CSS 
    TS 
  Directives 
  Services
  Classes/Models 
  Interfaces 
  Guards
  Pipes 
  Modules 
  Interceptors 

---

Concepts
--
  ViewEncapsulation [DONE]
  Data Binding 
  Routing [DONE]
  Dependency Injection 
  RxJS/Observables
  Subscription 

  Unit Testing 

  Internationalization (i18n)
  ng animations 
  
--
NgRx - Framework 
---



Employee Management App 
--
  Add New Employee 
  List Employees 
  Employee Details 
  Update Employee 
  Delete Employee 

---
Thinking in Angular 
  1. Identify the number of components 
  2. Identify the hierarchy of components 
---


Project Structure
--
  src/
    app/ 
      header/
        ...
        ...
        ...
        ...
      footer/
        ... ts 
        ... spec.ts 
      menu/
        ...
        ...
        ...
      concepts/
        components/
          
      ...
      ...
      ...


Routing 
---

  Single Page Apps 
  --
    7 Characteristics 
    ---
      1. Pages should not refresh [DONE]
      2. URL should change [DONE]
      3. History should be maintained [DONE]
      4. Header and footer should be intact [DONE]
      5. Section in between header and footer should be updated [DONE]
      6. Active menu should be set [TODO]
      7. Page Title should also be set [TODO]
    
  ---
    Step 0: 
      Identify the URLs and matching components 

        localhost:4200/           - HomeComponent 
        localhost:4200/concepts   - ConceptsComponent 
        localhost:4200/about      - AboutComponent 

    Step 1:
    --  
      LEt's setup the URLs in menu.comp.html 

    Step 2: 
    =----
      Let's create the components. 
        ng g c home -t -s 
        ng g c concepts -s 
        ng g c about -s 

    Step 3: 
    --
      Let's check the app. The URLs are not stable. 

      Let's config the routes in app-routing.module.ts 

    Step 4: 
    --
      Let's check the app. The URLs are stable. But the comp is not loaded in b/w header and footer

      In app.comp.html in between header and footer, let's load the config comps. 

      <router-outlet></router-outlet>

    Step 5: 
    ---
      Let's check the app. Pages are refreshed. Let's fix it. 

      in menu.comp.html -- replace all href to routerLink 


---

Coding Practices 
-------------
  Casing Types 
  ------------- 
    1. PascalCase 
        * recommended for classes, interfaces (Ex: class Car, interface IUser)

    2. camelCase 
        * recommended for variables, const, methods 
        * recommended for attribute directives 

    3. kebab-case
        * recommended for component selectors (Ex: app-root)
        * preferred for css classes  (Ex: btn-primary)
    
    4. snake_case
        * never ever use this 
        * okay for const if architect accepts 
          (ex: const MAX_CLASSES_PER_STUDENT = 10 )
          

  -------- 









Data Binding 
---
  comp.TS => comp.HTML 

  1. Interpolation [DONE] 
      TS => HTML 
      {{ }}

  2. Property Binding [DONE]
      TS => HTML 
      []

  3. Event Binding [DONE]
      TS <== HTML 
      ()

  4. Two-Way Binding 
      TS <=> HTML 
      [(ngModel)] 

      Note: applicable in form fields

  5. Custom Property Binding 
      []
      
  6. Custom Event Binding 
      ()


---

Cross Component Communication
---------
  1. Parent to Child Component Communication [DONE]
      using Custom Property Binding 

  2. Child to Parent Component Communication
      2.1 using Custom Event Binding (child comp sends data to parent)
      2.2 using @ViewChild()  (parent comp can access data from child comp)  [TODO]

  3. Any to Any Component Communication
      Prereq: Services, Dep Inj, RxJS/Observables, Subscription 

